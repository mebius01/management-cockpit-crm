"""
This type stub file was generated by pyright.
"""

import enum
from django.utils.version import PY311, PY312
from enum import EnumMeta as EnumType, EnumType, IntEnum, StrEnum, property as enum_property
from types import DynamicClassAttribute as enum_property

if PY311:
    ...
else:
    class ReprEnum(enum.Enum):
        def __str__(self) -> str:
            ...
        
    
    
    class IntEnum(int, ReprEnum):
        ...
    
    
    class StrEnum(str, ReprEnum):
        ...
    
    
__all__ = ["Choices", "IntegerChoices", "TextChoices"]
class ChoicesType(EnumType):
    """A metaclass for creating a enum choices."""
    def __new__(metacls, classname, bases, classdict, **kwds):
        ...
    
    if not PY312:
        def __contains__(cls, member): # -> bool:
            ...
        
    @property
    def names(cls): # -> list[str]:
        ...
    
    @property
    def choices(cls): # -> list[tuple[None, Any]]:
        ...
    
    @property
    def labels(cls): # -> list[Any]:
        ...
    
    @property
    def values(cls): # -> list[None]:
        ...
    


class Choices(enum.Enum, metaclass=ChoicesType):
    """Class for creating enumerated choices."""
    if PY311:
        do_not_call_in_templates = ...
    else:
        @property
        def do_not_call_in_templates(self): # -> Literal[True]:
            ...
        
    @enum_property
    def label(self):
        ...
    
    def __repr__(self): # -> str:
        ...
    


class IntegerChoices(Choices, IntEnum):
    """Class for creating enumerated integer choices."""
    ...


class TextChoices(Choices, StrEnum):
    """Class for creating enumerated string choices."""
    ...


def __getattr__(name): # -> type[ChoicesType]:
    ...


"""
This type stub file was generated by pyright.
"""

"""
Based on "python-archive" -- https://pypi.org/project/python-archive/

Copyright (c) 2010 Gary Wilson Jr. <gary.wilson@gmail.com> and contributors.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"""
class ArchiveException(Exception):
    """
    Base exception class for all archive errors.
    """
    ...


class UnrecognizedArchiveFormat(ArchiveException):
    """
    Error raised when passed file is not a recognized archive format.
    """
    ...


def extract(path, to_path): # -> None:
    """
    Unpack the tar or zip file at the specified path to the directory
    specified by to_path.
    """
    ...

class Archive:
    """
    The external API class that encapsulates an archive implementation.
    """
    def __init__(self, file) -> None:
        ...
    
    def __enter__(self): # -> Self:
        ...
    
    def __exit__(self, exc_type, exc_value, traceback): # -> None:
        ...
    
    def extract(self, to_path): # -> None:
        ...
    
    def list(self): # -> None:
        ...
    
    def close(self): # -> None:
        ...
    


class BaseArchive:
    """
    Base Archive class.  Implementations should inherit this class.
    """
    def split_leading_dir(self, path): # -> list[str] | tuple[str, Literal['']]:
        ...
    
    def has_leading_dir(self, paths): # -> bool:
        """
        Return True if all the paths have the same leading path name
        (i.e., everything is in one subdirectory in an archive).
        """
        ...
    
    def target_filename(self, to_path, name):
        ...
    
    def extract(self):
        ...
    
    def list(self):
        ...
    


class TarArchive(BaseArchive):
    def __init__(self, file) -> None:
        ...
    
    def list(self, *args, **kwargs): # -> None:
        ...
    
    def extract(self, to_path): # -> None:
        ...
    
    def close(self): # -> None:
        ...
    


class ZipArchive(BaseArchive):
    def __init__(self, file) -> None:
        ...
    
    def list(self, *args, **kwargs): # -> None:
        ...
    
    def extract(self, to_path): # -> None:
        ...
    
    def close(self): # -> None:
        ...
    


extension_map = ...

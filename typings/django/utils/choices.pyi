"""
This type stub file was generated by pyright.
"""

__all__ = ["BaseChoiceIterator", "BlankChoiceIterator", "CallableChoiceIterator", "flatten_choices", "normalize_choices"]
class BaseChoiceIterator:
    """Base class for lazy iterators for choices."""
    def __eq__(self, other) -> bool:
        ...
    
    def __getitem__(self, index):
        ...
    
    def __iter__(self):
        ...
    


class BlankChoiceIterator(BaseChoiceIterator):
    """Iterator to lazily inject a blank choice."""
    def __init__(self, choices, blank_choice) -> None:
        ...
    
    def __iter__(self): # -> Generator[Any, Any, None]:
        ...
    


class CallableChoiceIterator(BaseChoiceIterator):
    """Iterator to lazily normalize choices generated by a callable."""
    def __init__(self, func) -> None:
        ...
    
    def __iter__(self): # -> Generator[Any, Any, None]:
        ...
    


def flatten_choices(choices): # -> Generator[Any | tuple[Any, Any], Any, None]:
    """Flatten choices by removing nested values."""
    ...

def normalize_choices(value, *, depth=...): # -> BaseChoiceIterator | Promise | bytes | str | list[tuple[None, Any]] | CallableChoiceIterator | list[tuple[Any, BaseChoiceIterator | Promise | bytes | str | list[tuple[None, Any]] | CallableChoiceIterator | Any | list[tuple[Any, Any]] | ItemsView[Any, Any] | Iterator[Any] | Iterable[Any]]] | ItemsView[Any, Any] | Iterator[Any] | Iterable[Any]:
    """Normalize choices values consistently for fields and widgets."""
    ...


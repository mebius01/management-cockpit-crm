"""
This type stub file was generated by pyright.
"""

"""
Syndication feed generation library -- used for generating RSS, etc.

Sample usage:

>>> from django.utils import feedgenerator
>>> feed = feedgenerator.Rss201rev2Feed(
...     title="Poynter E-Media Tidbits",
...     link="http://www.poynter.org/column.asp?id=31",
...     description="A group blog by the sharpest minds in online journalism.",
...     language="en",
... )
>>> feed.add_item(
...     title="Hello",
...     link="http://www.holovaty.com/test/",
...     description="Testing."
... )
>>> with open('test.rss', 'w') as fp:
...     feed.write(fp, 'utf-8')

For definitions of the different versions of RSS, see:
https://web.archive.org/web/20110718035220/http://diveintomark.org/archives/2004/02/04/incompatible-rss
"""
def rfc2822_date(date):
    ...

def rfc3339_date(date): # -> str:
    ...

def get_tag_uri(url, date): # -> LiteralString:
    """
    Create a TagURI.

    See
    https://web.archive.org/web/20110514113830/http://diveintomark.org/archives/2004/05/28/howto-atom-id
    """
    ...

class SyndicationFeed:
    "Base class for all syndication feeds. Subclasses should provide write()"
    def __init__(self, title, link, description, language=..., author_email=..., author_name=..., author_link=..., subtitle=..., categories=..., feed_url=..., feed_copyright=..., feed_guid=..., ttl=..., **kwargs) -> None:
        ...
    
    def add_item(self, title, link, description, author_email=..., author_name=..., author_link=..., pubdate=..., comments=..., unique_id=..., unique_id_is_permalink=..., categories=..., item_copyright=..., ttl=..., updateddate=..., enclosures=..., **kwargs): # -> None:
        """
        Add an item to the feed. All args are expected to be strings except
        pubdate and updateddate, which are datetime.datetime objects, and
        enclosures, which is an iterable of instances of the Enclosure class.
        """
        ...
    
    def num_items(self): # -> int:
        ...
    
    def root_attributes(self): # -> dict[Any, Any]:
        """
        Return extra attributes to place on the root (i.e. feed/channel) element.
        Called from write().
        """
        ...
    
    def add_root_elements(self, handler): # -> None:
        """
        Add elements in the root (i.e. feed/channel) element. Called
        from write().
        """
        ...
    
    def item_attributes(self, item): # -> dict[Any, Any]:
        """
        Return extra attributes to place on each item (i.e. item/entry) element.
        """
        ...
    
    def add_item_elements(self, handler, item): # -> None:
        """
        Add elements on each item (i.e. item/entry) element.
        """
        ...
    
    def write(self, outfile, encoding):
        """
        Output the feed in the given encoding to outfile, which is a file-like
        object. Subclasses should override this.
        """
        ...
    
    def writeString(self, encoding): # -> str:
        """
        Return the feed in the given encoding as a string.
        """
        ...
    
    def latest_post_date(self): # -> datetime:
        """
        Return the latest item's pubdate or updateddate. If no items
        have either of these attributes this return the current UTC date/time.
        """
        ...
    


class Enclosure:
    """An RSS enclosure"""
    def __init__(self, url, length, mime_type) -> None:
        "All args are expected to be strings"
        ...
    


class RssFeed(SyndicationFeed):
    content_type = ...
    def write(self, outfile, encoding): # -> None:
        ...
    
    def rss_attributes(self): # -> dict[str, Any | str]:
        ...
    
    def write_items(self, handler): # -> None:
        ...
    
    def add_root_elements(self, handler): # -> None:
        ...
    
    def endChannelElement(self, handler): # -> None:
        ...
    


class RssUserland091Feed(RssFeed):
    _version = ...
    def add_item_elements(self, handler, item): # -> None:
        ...
    


class Rss201rev2Feed(RssFeed):
    _version = ...
    def add_item_elements(self, handler, item): # -> None:
        ...
    


class Atom1Feed(SyndicationFeed):
    content_type = ...
    ns = ...
    def write(self, outfile, encoding): # -> None:
        ...
    
    def root_attributes(self): # -> dict[str, str | Any | list[str] | tuple[()]] | dict[str, str]:
        ...
    
    def add_root_elements(self, handler): # -> None:
        ...
    
    def write_items(self, handler): # -> None:
        ...
    
    def add_item_elements(self, handler, item): # -> None:
        ...
    


DefaultFeed = Rss201rev2Feed

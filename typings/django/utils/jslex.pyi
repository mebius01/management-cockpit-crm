"""
This type stub file was generated by pyright.
"""

"""JsLex: a lexer for JavaScript"""
class Tok:
    """
    A specification for a token class.
    """
    num = ...
    def __init__(self, name, regex, next=...) -> None:
        ...
    


def literals(choices, prefix=..., suffix=...): # -> LiteralString:
    """
    Create a regex from a space-separated list of literal `choices`.

    If provided, `prefix` and `suffix` will be attached to each choice
    individually.
    """
    ...

class Lexer:
    """
    A generic multi-state regex-based lexer.
    """
    def __init__(self, states, first) -> None:
        ...
    
    def lex(self, text): # -> Generator[tuple[Any, Any], Any, None]:
        """
        Lexically analyze `text`.

        Yield pairs (`name`, `tokentext`).
        """
        ...
    


class JsLexer(Lexer):
    """
    A JavaScript lexer

    >>> lexer = JsLexer()
    >>> list(lexer.lex("a = 1"))
    [('id', 'a'), ('ws', ' '), ('punct', '='), ('ws', ' '), ('dnum', '1')]

    This doesn't properly handle non-ASCII characters in the JavaScript source.
    """
    both_before = ...
    both_after = ...
    states = ...
    def __init__(self) -> None:
        ...
    


def prepare_js_for_gettext(js): # -> LiteralString:
    """
    Convert the JavaScript source `js` into something resembling C for
    xgettext.

    What actually happens is that all the regex literals are replaced with
    "REGEX".
    """
    ...

